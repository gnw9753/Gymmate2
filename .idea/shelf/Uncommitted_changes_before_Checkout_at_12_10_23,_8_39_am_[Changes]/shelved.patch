Index: app/src/main/java/com/example/gymmate/summarypage/SummaryPage.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.gymmate.summarypage\n\n\nimport android.os.Build\nimport androidx.annotation.RequiresApi\nimport androidx.compose.foundation.clickable\nimport androidx.compose.foundation.layout.*\nimport androidx.compose.foundation.lazy.grid.GridCells\nimport androidx.compose.foundation.lazy.grid.LazyVerticalGrid\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.filled.ChevronLeft\nimport androidx.compose.material.icons.filled.ChevronRight\nimport androidx.compose.material3.*\nimport androidx.compose.runtime.*\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.unit.dp\nimport androidx.lifecycle.viewmodel.compose.viewModel\nimport com.example.gymmate.AppViewModelProvider\nimport com.example.gymmate.GymmateNavigationBar\nimport com.example.gymmate.GymmateRoute\nimport com.example.gymmate.NavigationActions\nimport java.time.LocalDate\nimport java.time.format.DateTimeFormatter\nimport java.time.format.FormatStyle\n\n@Composable\nfun SummaryPage(\n    navigationActions: NavigationActions,\n    viewModel: SummaryPageViewModel = viewModel(factory = AppViewModelProvider.Factory),\n    modifier: Modifier = Modifier\n) {\n    Column(\n        modifier = Modifier\n            .fillMaxHeight()\n    ) {\n        Column(\n            modifier = Modifier\n                .weight(1f)\n        ) {\n            WeightGraphCard(\n                modifier = Modifier\n                    .weight(1f)\n            )\n            CaloriesGraphCard(\n                modifier = Modifier\n                    .weight(1f)\n            )\n            BottomButton(\n                modifier = Modifier\n                    .weight(1f)\n            )\n            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n                CalendarApp(\n                    modifier = Modifier\n                        .weight(1f)\n                        .fillMaxWidth()\n                )\n            }\n        }\n\n        GymmateNavigationBar(\n            selectedDestination = GymmateRoute.SUMMARY,\n            navigateToTopLevelDestination = navigationActions::navigateTo\n        )\n\n    }\n}\n\n@Composable\nfun WeightGraphCard(modifier: Modifier = Modifier) {\n    Card(\n        modifier = modifier\n            .fillMaxWidth()\n            .fillMaxHeight()\n    ) {\n        Text(\"Weight graph\")\n    }\n}\n\n@Composable\nfun CaloriesGraphCard(modifier: Modifier = Modifier) {\n    Card(\n        modifier = modifier\n            .fillMaxWidth()\n            .fillMaxHeight()\n    ) {\n        Text(\"calories graph\")\n    }\n}\n\n@Composable\nfun BottomButton(\n    modifier: Modifier = Modifier\n) {\n    Column(\n        modifier = modifier\n            .fillMaxWidth()\n            .fillMaxHeight()\n    ) {\n        TopRowButton()\n        BottomRowButton()\n    }\n}\n\n@Composable\nfun TopRowButton(modifier: Modifier = Modifier) {\n    Row {\n        Button(\n            onClick = {}\n        ) {\n            Text(\"Change Workout\")\n        }\n        Button(\n            onClick = {}\n        ) {\n            Text(\"Set alarm\")\n        }\n    }\n}\n\n@Composable\nfun BottomRowButton(modifier: Modifier = Modifier) {\n    Row {\n        Button(\n            onClick = {}\n        ) {\n            Text(\"Change User Info\")\n        }\n        Button(\n            onClick = {}\n        ) {\n            Text(\"Download Workout\")\n        }\n    }\n}\n\n\n@Composable\nfun CalendarApp(\n    modifier: Modifier = Modifier,\n) {\n    val dataSource = CalendarDataSource()\n    var data by remember { mutableStateOf(dataSource.getData(lastSelectedDate = dataSource.today)) }\n    Column(modifier = modifier.fillMaxSize()) {\n        Header(\n            data = data,\n            onPrevClickListener = { startDate ->\n                val finalStartDate = startDate.minusDays(1)\n                data = dataSource.getData(startDate = finalStartDate, lastSelectedDate = data.selectedDate.date)\n            },\n            onNextClickListener = { endDate ->\n                val finalStartDate = endDate.plusDays(2)\n                data = dataSource.getData(startDate = finalStartDate, lastSelectedDate = data.selectedDate.date)\n            }\n        )\n        Content(data = data) { date ->\n            data = data.copy(\n                selectedDate = date,\n                visibleDates = data.visibleDates.map {\n                    it.copy(\n                        isSelected = it.date.isEqual(date.date)\n                    )\n                }\n            )\n        }\n    }\n}\n\n\n@RequiresApi(Build.VERSION_CODES.O)\n@Composable\nfun Header(\n    data: CalendarUiModel,\n    onPrevClickListener: (LocalDate) -> Unit,\n    onNextClickListener: (LocalDate) -> Unit,\n) {\n    Row {\n        Text(\n            text = if (data.selectedDate.isToday) {\n                \"Today\"\n            } else {\n                data.selectedDate.date.format(\n                    DateTimeFormatter.ofLocalizedDate(FormatStyle.FULL)\n                )\n            },\n            modifier = Modifier\n                .weight(1f)\n                .align(Alignment.CenterVertically)\n        )\n        IconButton(onClick = {\n            onPrevClickListener(data.startDate.date)\n        }) {\n            Icon(\n                imageVector = Icons.Filled.ChevronLeft,\n                contentDescription = \"Back\"\n            )\n        }\n        IconButton(onClick = {\n            onNextClickListener(data.endDate.date)\n        }) {\n            Icon(\n                imageVector = Icons.Filled.ChevronRight,\n                contentDescription = \"Next\"\n            )\n        }\n    }\n}\n\n@Composable\nfun Content(\n    data: CalendarUiModel,\n    onDateClickListener: (CalendarUiModel.Date) -> Unit,\n) {\n    LazyVerticalGrid(columns = GridCells.Adaptive(minSize = 80.dp)) {\n        items(data.visibleDates.size) { index ->\n            ContentItem(\n                date = data.visibleDates[index],\n                onDateClickListener\n            )\n        }\n    }\n}\n\n@RequiresApi(Build.VERSION_CODES.O)\n@OptIn(ExperimentalMaterial3Api::class)\n@Composable\nfun ContentItem(\n    date: CalendarUiModel.Date,\n    onClickListener: (CalendarUiModel.Date) -> Unit,\n) {\n    Card(\n        modifier = Modifier\n            .padding(vertical = 4.dp, horizontal = 4.dp)\n            .clickable {\n                onClickListener(date)\n            },\n        colors = CardDefaults.cardColors(\n            containerColor = if (date.isSelected) {\n                Color.Blue\n            } else {\n                Color.LightGray\n            }\n        ),\n    ) {\n        Column(\n            modifier = Modifier\n                .width(80.dp)\n                .height(80.dp)\n                .padding(4.dp)\n        ) {\n            Text(\n                text = date.day,\n                modifier = Modifier.align(Alignment.CenterHorizontally),\n                style = MaterialTheme.typography.bodySmall\n            )\n            Text(\n                text = date.date.dayOfMonth.toString(),\n                modifier = Modifier.align(Alignment.CenterHorizontally),\n                style = MaterialTheme.typography.bodyMedium,\n            )\n            Text(\n                text = \"exercise\",\n                modifier = Modifier.align(Alignment.CenterHorizontally),\n                style = MaterialTheme.typography.bodySmall,\n            )\n        }\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/gymmate/summarypage/SummaryPage.kt b/app/src/main/java/com/example/gymmate/summarypage/SummaryPage.kt
--- a/app/src/main/java/com/example/gymmate/summarypage/SummaryPage.kt	
+++ b/app/src/main/java/com/example/gymmate/summarypage/SummaryPage.kt	
@@ -21,6 +21,7 @@
 import com.example.gymmate.GymmateNavigationBar
 import com.example.gymmate.GymmateRoute
 import com.example.gymmate.NavigationActions
+import com.example.gymmate.data.userdata.UserInstance
 import java.time.LocalDate
 import java.time.format.DateTimeFormatter
 import java.time.format.FormatStyle
@@ -238,6 +239,7 @@
             },
         colors = CardDefaults.cardColors(
             containerColor = if (date.isSelected) {
+                // Reminder to change color and alpha levels
                 Color.Blue
             } else {
                 Color.LightGray
